version: '3.3'

services:
  web:
    environment:
      ENV: STAGE
      OME_HOST: ${OME_HOST}
      POLICY_KEY: ${POLICY_KEY}
      OME_API_TOKEN: ${OME_API_TOKEN}
    build: .
    volumes:
      - ./stream_app:/app
      - STATIC:/app/stream_app/static
    ports:
      - 8000:8000
    networks:
      nginx_net:
    restart: always
    
  ome:
    image: airensoft/ovenmediaengine:0.15.10
    ports:
      - 8081:8081
      - 1935:1935
      - 3333:3333
      - 3334:3334
      - 9000:9000 
    environment: 
      OME_ORIGIN_PORT: 9000
      OME_RTMP_PROV_PORT: 1935
      # OME_LLHLS_STREAM_PORT: 3333
      OME_LLHLS_STREAM_TLS_PORT: 3334
      OME_API_PORT: 8081
      POLICY_KEY: ${POLICY_KEY}
      OME_API_TOKEN: ${OME_API_TOKEN}  
    volumes:
    - ./origin_conf:/opt/ovenmediaengine/bin/origin_conf
    networks:
      nginx_net:
    restart: always  

  db:
    image: postgres:latest
    user: postgres
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - PGDATA:/var/lib/postgresql/data
      - ./DATABASE:/db
    networks:
      nginx_net:
    restart: always
  
  proxy:
    image: nginx:latest
    ports:
      - 80:80
      - 433:433
    volumes:
      - STATIC:/app/stream_app/static
      - ./nginx/stage.conf:/etc/nginx/conf.d/default.conf
      - ./cert/conf:/etc/letsencrypt:ro
      - ./cert/www:/var/www/certbot:ro
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
    networks:
      nginx_net: 
    restart: unless-stopped   
  
  certbot:
    image: certbot/certbot
    volumes:
      - ./cert/conf:/etc/letsencrypt
      - ./cert/www:/var/www/certbot
    # entrypoint:  "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"\
    command: certonly --webroot --webroot-path=/var/www/certbot/ --email tagabenz@gmail.com.com --agree-tos --no-eff-email -d dev.lastream.online
    depends_on:
      - proxy  
    networks:
      nginx_net:
    restart: unless-stopped   

volumes:
  PGDATA:
  STATIC:

networks:
  nginx_net:
